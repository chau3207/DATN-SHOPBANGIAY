------------------------------------------------------------------------
Index.cshtml
@{
    ViewData["Title"] = "List Product Page";
}

@model ShoeStore.Models.ViewModels.ProductListViewModel

<div class="container">
    <section class="list mt-lg-5 mt-4 mb-5">
        <button class="btn-category d-lg-none" id="navbar-toggle">
            <span>Filter</span>
        </button>
        <div class="list-filter d-lg-block hidden" id="navbar-collapse">
            <h3>
                <strong>Danh mục</strong>
            </h3>
            <form id="search-product" method="get" asp-controller="Products" asp-action="Index">
                <div class="budget-wrap mt-5">
                    <h4 class="mb-3">Lọc theo giá</h4>
                    <div class="budget">
                        <div class="content">
                            <input type="range" name="maxPrice" min="1" max="900" value="@(Model.maxPrice ?? 900)" data-rangeslider >
                            <div class="header">
                                <div class="title clearfix mt-3">
                                    <p>Giá tiền:</p>
                                    <span class="pull-right" id="price-display">$@Model.maxPrice</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-category mt-3">
                    <h4 class="mb-3">Nhãn hàng</h4>
                    @for (var i = 0; i < Model.Brands.Count; i++)
                    {
                        var brand = Model.Brands[i];
                        <div class="form-check">
                            <label class="form-check-label" >
                                <input class="form-check-input" type="radio" name="brand" value="@brand.Name" @(brand.Id == Model.SelectedBrandId? "checked": "")>
                                @brand.Name
                            </label>
                        </div>
                    }
    
                </div>
                <div class="form-category mt-4">
                    <h4 class="mb-3">Kích cỡ</h4>
                    @for (var i = 0; i < Model.Sizes.Count; i++)
                    {
                        var size = Model.Sizes[i];
                        <div class="form-check">
                            
                            <label class="form-check-label">
                                <input class="form-check-input" type="radio" name="size" value="@size.Value" @(size.Id == Model.SelectedSizeId? "checked": "")>
                                @size.Value
                            </label>
                        </div>
                    }
    
                </div>
                <div class="btn-submit mt-4">
                    <button type="submit" id="btn-search-products">Tìm kiếm</button>
                </div>
            </form>
        </div>
        <div class="list-product">
            <div class="list-product-top">
                <h3>
                    <strong>@(Model.SearchedBrand ?? "Giày")</strong>
                </h3>
                <div class="form-floating">
                    <select class="form-select" id="sort-by" name="sort" aria-label="Floating label select example" form="search-product" asp-items="Model.SelectListItems">
                        @* <option value="latest" selected>Latest</option> *@
                        @* <option value="lowest">Price: Low to high</option> *@
                        @* <option value="highest">Price: High to low</option> *@
                    </select>
                    <label for="sort-by">Sắp xếp theo</label>
                </div>
            </div>
            <div class="list-product-container">
                <div class="product mt-4" data-aos="zoom-in">

                    @foreach (var product in Model.ProductCards)
                    {
                        <div class="product-card">
                            <a asp-controller="Products" asp-action="Detail" asp-route-url="@product.Url">
                                <div class="product-card-image">
                                    <img loading="lazy" asp-append-version="true" src='@Url.Content(product?.ImagePath)' alt="">
                                </div>
                            </a>
                            <div class="product-card-top">
                                <span>@product.BrandName</span>
                                <a asp-controller="Products" asp-action="Detail" asp-route-url="@product.Url">
                                    <h6>@product.Name</h6>
                                </a>
                            </div>
                            <div class="product-card-bottom">
                                <h5>
                                    <strong>$@product.Price</strong>
                                </h5>
                                <div>
                                    <a href="">
                                        <i class="fa-solid fa-heart"></i>
                                    </a>
                                    <a href="">
                                        <i class="fa-solid fa-bag-shopping"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
           
            
        </div>
    </section>
</div>

@section Scripts
{
    <script >
        $("#sort-by").change(function() {
          $("#btn-search-products").click();
        })

        
    </script>
}

------------------------------------------------------------
ProductsController
public async Task<IActionResult> Index(string? productName, string? brand = null, int? size = null,
        decimal? minPrice = 0,
        decimal? maxPrice = 999, string? sort = "latest")
    {
        ProductListViewModel productListViewModel = await _unitOfWork.ShoeColors.FilterProductAsync(productName, brand, size, minPrice, maxPrice, sort);
        return View(productListViewModel);
    }
------------------------------------------------------
IShoeColorRepository.cs
using ShoeStore.Models;
using ShoeStore.Models.ViewModels;

namespace ShoeStore.DataAccess.Repository.IRepository;

public interface IShoeColorRepository : IRepository<ShoeColor>
{
    void Update(ShoeColor obj);

    Task<ProductListViewModel> FilterProductAsync(
        //int pageSize,
        string? productName,
        //int page = 1,
        string? brand = null,
        int? size = null,
        decimal? minPrice = 0,
        decimal? maxPrice = 999, string? sort = "latest");
}
---------------------------------------------------------------
ProductListViewModel.cs
using Microsoft.AspNetCore.Mvc.Rendering;

namespace ShoeStore.Models.ViewModels;

public class ProductListViewModel
{
    public List<ShoeColor>? ShoeColors { get; set; }
    public IEnumerable<ProductCardViewModel>? ProductCards { get; set; }
    public List<Brand>? Brands { get; set; }
    public List<Size>? Sizes { get; set; }
    public int? SelectedBrandId { get; set; }
    public int? SelectedSizeId { get; set; }
    public decimal? maxPrice { get; set; } = 900;
    public string? SearchedBrand { get; set; }
    public List<SelectListItem>? SelectListItems { get; set; }
    //public PagingInfo PagingInfo { get; set; } = new();
    

    public string CurrentBrand { get; set; }
}
---------------------------------------------------------------------------
ShoeColorRepository.cs
public async Task<ProductListViewModel> FilterProductAsync(
        string? productName = null, string? brand = null,
        int? size = null,
        decimal? minPrice = null, decimal? maxPrice = null, string? sort = "latest")
    {
        var shoeQuery = _context.Shoes
            .Include(e => e.Brand)
            .Select(e => new
            {
                ShoeId = e.Id,
                Name = e.Name,
                BrandName = e.Brand!.Name
            });
        if (brand != null)
        {
            shoeQuery = shoeQuery.Where(e => e.BrandName == brand);
        }

        if (productName != null)
        {
            shoeQuery = shoeQuery.Where(e => EF.Functions.Like(e.Name, $"%{productName.Trim()}%"));
        }

        var shoeColorsQuery = _context.ShoeColor
            .Where(e => e.Active == true)
            .Include(e => e.Images)
            .Include(e => e.ShoeSizes)
            .Select(e => new
            {
                ShoeId = e.ShoeId,
                ShoeSizes = e.ShoeSizes,
                Price = e.SalePrice,
                ImagePath = e.Images.First().Path,
                Url = e.Url,
                Created = e.Created
            });

        if (size != null)
        {
            shoeColorsQuery = shoeColorsQuery.Where(e => e.ShoeSizes.Any(e => e.Size.Value == size));
        }

        ;
        if (maxPrice != null)
        {
            shoeColorsQuery = shoeColorsQuery.Where(e => e.Price <= maxPrice);
        }

        IQueryable<ProductCardViewModel> productCardViewModels = from shoeColor in shoeColorsQuery
                                                                 join shoe in shoeQuery
                                                                     on shoeColor.ShoeId equals shoe.ShoeId
                                                                 select new ProductCardViewModel()
                                                                 {
                                                                     Name = shoe.Name,
                                                                     Price = shoeColor.Price,
                                                                     Url = shoeColor.Url,
                                                                     BrandName = shoe.BrandName,
                                                                     ImagePath = shoeColor.ImagePath,
                                                                     Created = shoeColor.Created
                                                                 };

        switch (sort)
        {
            case "lowest":
                productCardViewModels = productCardViewModels.OrderBy(e => e.Price);
                break;
            case "highest":
                productCardViewModels = productCardViewModels.OrderBy(e => e.Price).Reverse();
                break;
            default:
                sort = "latest";
                productCardViewModels = productCardViewModels.OrderBy(e => e.Created);
                break;
        }

        List<ProductCardViewModel> productCards = await productCardViewModels.ToListAsync();

        var brands = await _context.Brands.AsNoTracking().OrderBy(e => e.Name).ToListAsync();
        var sizes = await _context.Sizes.AsNoTracking().OrderBy(e => e.Value).ToListAsync();

        ProductListViewModel productListViewModel = new ProductListViewModel()
        {
            Brands = brands,
            Sizes = sizes,
            // ShoeColors = shoeColors,
            ProductCards = productCards.ToList(),
            SelectedBrandId = (brands.FirstOrDefault(e => e.Name == brand))?.Id,
            SelectedSizeId = (sizes.FirstOrDefault(e => e.Value.ToString() == size.ToString()))?.Id,
            CurrentBrand = brand
        };

        if (maxPrice != null)
        {
            productListViewModel.maxPrice = maxPrice;
        }

        productListViewModel.SearchedBrand = brand;

        List<SelectListItem> selectListItems = new List<SelectListItem>()
        {
            new SelectListItem("Mới nhất", "latest"),
            new SelectListItem("Giá: Từ thấp đến cao", "lowest"),
            new SelectListItem("Giá: Từ cao đến thấp", "highest"),
        };
        for (int i = 0; i < selectListItems.Count; i++)
        {
            SelectListItem opt = selectListItems[i];
            if (opt.Value == sort)
            {
                opt.Selected = true;
                break;
            }
        }

        productListViewModel.SelectListItems = selectListItems;


        return productListViewModel;
    }