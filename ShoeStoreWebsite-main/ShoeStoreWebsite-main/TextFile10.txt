ShoeColorsController.cs
using System.Text.RegularExpressions;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using Org.BouncyCastle.Utilities;
using ShoeStore.DataAccess.Repository.IRepository;
using ShoeStore.Models;
using ShoeStore.Ultitity;
using X.PagedList;

namespace ShoeStore.Controllers
{
    [Authorize(Roles = SD.Role_Admin)]
    public class ShoeColorsController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IWebHostEnvironment _webHostEnvironment;

        public ShoeColorsController(IWebHostEnvironment webHostEnvironment, IUnitOfWork unitOfWork)
        {
            _webHostEnvironment = webHostEnvironment;
            _unitOfWork = unitOfWork;
        }

        public async Task<IActionResult> Index(int? page,string nameSearch)
        {
            int pageNumber = page ?? 1;
            int pageSize = 10;
            var shoecolors = await _unitOfWork.ShoeColors.GetAllAsync(include: e => e.Include(s => s.Color)
                .Include(s => s.Shoe)!);
            if (!string.IsNullOrEmpty(nameSearch))
            {
                shoecolors = shoecolors.Where(s => s.Shoe.Name.Contains(nameSearch)).ToList();
            }
            var paginatedShoeColors = shoecolors.ToPagedList(pageNumber, pageSize);
            return View(paginatedShoeColors);
        }

        // GET: ShoeColors/Details/5
        public async Task<IActionResult> Details(int id)
        {
            var shoeColor = await _unitOfWork.ShoeColors.FirstOrDefaultAsync(e => e.Id == id,
                include: e => e.Include(s => s.Images)
                    .Include(s => s.ShoeSizes)!
                    .ThenInclude(e => e.Size));

            if (shoeColor == null)
            {
                return NotFound();
            }

            ViewData["ColorId"] =
                new SelectList(new[] { await _unitOfWork.Colors.FirstOrDefaultAsync(e => e.Id == shoeColor.ColorId) },
                    "Id", "Name", shoeColor.ColorId);
            ViewData["ShoeId"] =
                new SelectList(new[] { await _unitOfWork.Shoes.FirstOrDefaultAsync(e => e.Id == shoeColor.ShoeId) },
                    "Id", "Name", shoeColor.ShoeId);
            // ViewBag.SizeId = new SelectList(_context.Sizes, "Id", "Value");
            ViewBag.Sizes = await _unitOfWork.Sizes.GetAllAsync();

            return View(shoeColor);
        }

        // GET: ShoeColors/Create
        public async Task<IActionResult> Create(int shoeId)
        {
            Shoe? shoe = await _unitOfWork.Shoes.FirstOrDefaultAsync(e => e.Id == shoeId);
            if (shoe == null)
            {
                return NotFound();
            }

            ViewData["ColorId"] =
                new SelectList(await _unitOfWork.Colors.GetAllAsync(orderBy: e => e.Name), "Id", "Name");
            ViewData["ShoeId"] = new SelectList(new[] { shoe }, "Id", "Name", shoeId.ToString());
            // ViewData["ShoeName"] = shoe.Name;
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(
            // [Bind("Id,FactoryPrice,SalePrice,SortOrder,Active,ShoeId,ColorId")]
            ShoeColor shoeColor, IFormFileCollection? formFileCollection)
        {
            if (ModelState.IsValid)
            {
                Shoe? shoeFromDb = await _unitOfWork.Shoes.FirstOrDefaultAsync(e => e.Id == shoeColor.ShoeId);
                Color? colorFromDb = await _unitOfWork.Colors.FirstOrDefaultAsync(e => e.Id == shoeColor.ColorId);
                if (shoeFromDb == null || colorFromDb == null)
                {
                    return NotFound();
                }

                shoeColor.Url = Regex.Replace(shoeFromDb.Name.ToLower(), @"\W+", "-")
                                + "-"
                                + Regex.Replace(colorFromDb.Name.ToLower(), @"\W+", "-");

                shoeColor.Created = DateTime.Now;
                shoeColor.Edited = DateTime.Now;
                await _unitOfWork.ShoeColors.AddAsync(shoeColor);
                await _unitOfWork.SaveChangesAsync();

                if (formFileCollection != null)
                {
                    int count = 0;
                    // var imageUrls = new List<string>();
                    string root = _webHostEnvironment.WebRootPath;

                    foreach (var formFile in formFileCollection)
                    {
                        string fileName = Guid.NewGuid().ToString();
                        string fileExtension = Path.GetExtension(formFile.FileName);
                        string filePath = Path.Combine(root, @"images\shoes", fileName + fileExtension);
                        await using (var fileStream = new FileStream(filePath, FileMode.Create))
                        {
                            await formFile.CopyToAsync(fileStream);
                        }

                        // imageUrls.Add(@"\images\shoes\" + fileName + fileExtension);
                        var image = new Image
                        {
                            ShoeColorId = shoeColor.Id,
                            Path = @"\images\shoes\" + fileName + fileExtension,
                            SortOrder = ++count
                        };
                        await _unitOfWork.Images.AddAsync(image);
                    }

                    await _unitOfWork.SaveChangesAsync();
                }

                return RedirectToAction(nameof(Edit), new { id = shoeColor.Id });
            }

            ViewData["ColorId"] = new SelectList(await _unitOfWork.Colors.GetAllAsync(orderBy: e => e.Name), "Id",
                "Name", shoeColor.ColorId);
            ViewData["ShoeId"] = new SelectList(await _unitOfWork.Shoes.GetAllAsync(), "Id", "Name", shoeColor.ShoeId);
            return View(shoeColor);
        }

        // GET: ShoeColors/Edit/5
        public async Task<IActionResult> Edit(int id)
        {
            var shoeColor = await _unitOfWork.ShoeColors.FirstOrDefaultAsync(e => e.Id == id,
                include: e => e.Include(s => s.Images)
                    .Include(s => s.ShoeSizes)!
                    .ThenInclude(e => e.Size)!);

            if (shoeColor == null)
            {
                return NotFound();
            }

            ViewData["ColorId"] =
                new SelectList(await _unitOfWork.Colors.GetAllAsync(), "Id", "Name", shoeColor.ColorId);
            ViewData["ShoeId"] = new SelectList(await _unitOfWork.Shoes.GetAllAsync(), "Id", "Name", shoeColor.ShoeId);
            // ViewBag.SizeId = new SelectList(_context.Sizes, "Id", "Value");
            ViewBag.Sizes = await _unitOfWork.Sizes.GetAllAsync();

            return View(shoeColor);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id,
            [Bind("Id,FactoryPrice,SalePrice,SortOrder,Active,ShoeId,ColorId")]
            ShoeColor shoeColor)
        {
            var shoeColorFromDb = await _unitOfWork.ShoeColors.FirstOrDefaultAsync(e => e.Id == id);
            if (id != shoeColor.Id || shoeColorFromDb == null)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                shoeColor.Created = shoeColorFromDb.Created;
                shoeColor.Edited = DateTime.Now;
                _unitOfWork.ShoeColors.Update(shoeColor);
                await _unitOfWork.SaveChangesAsync();
                TempData["SuccessMessage"] = "Thông tin màu sắc giày được chỉnh sửa thành công";
                //return RedirectToAction(nameof(Edit));
                return RedirectToAction(nameof(Index));
            }

            ViewData["ColorId"] =
                new SelectList(await _unitOfWork.Colors.GetAllAsync(), "Id", "Name", shoeColor.ColorId);
            ViewData["ShoeId"] = new SelectList(await _unitOfWork.Shoes.GetAllAsync(), "Id", "Name", shoeColor.ShoeId);
            ViewData["SizeId"] = new SelectList(await _unitOfWork.Sizes.GetAllAsync(), "id", "name");
            return View(shoeColor);
        }

        public async Task<IActionResult> Delete(int id)
        {
            var shoeColor = await _unitOfWork.ShoeColors.FirstOrDefaultAsync(e => e.Id == id,
                include: e => e.Include(s => s.Images)
                    .Include(s => s.ShoeSizes)!
                    .ThenInclude(e => e.Size));

            if (shoeColor == null)
            {
                return NotFound();
            }

            ViewData["ColorId"] =
                new SelectList(new[] { await _unitOfWork.Colors.FirstOrDefaultAsync(e => e.Id == shoeColor.ColorId) },
                    "Id", "Name", shoeColor.ColorId);
            ViewData["ShoeId"] =
                new SelectList(new[] { await _unitOfWork.Shoes.FirstOrDefaultAsync(e => e.Id == shoeColor.ShoeId) },
                    "Id", "Name", shoeColor.ShoeId);
            // ViewBag.SizeId = new SelectList(_context.Sizes, "Id", "Value");
            ViewBag.Sizes = await _unitOfWork.Sizes.GetAllAsync();

            return View(shoeColor);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var shoeColor = await _unitOfWork.ShoeColors.FirstOrDefaultAsync(e => e.Id == id);
            if (shoeColor == null)
            {
                return NotFound();
            }
            
            var shoeSizes = await _unitOfWork.ShoeSizes.GetAllAsync(e => e.ShoeColorId == shoeColor.Id);
            
            if(shoeSizes.Count == 0)
            {
                List<Image> shoeImages = await _unitOfWork.Images.GetAllAsync(e => e.ShoeColorId == shoeColor.Id);
                if (shoeImages != null && shoeImages.Count > 0)
                {
                    var root = _webHostEnvironment.WebRootPath;
                    foreach (var image in shoeImages)
                    {
                        string imageUrl = image.Path;
                        var imagePath = Path.Combine(root, imageUrl.TrimStart('\\'));
                        if (System.IO.File.Exists(imagePath))
                        {
                            System.IO.File.Delete(imagePath);
                        }
                    }
                }

                _unitOfWork.ShoeColors.Remove(shoeColor);
                await _unitOfWork.SaveChangesAsync();
                TempData["SuccessMessage"] = "Thông tin màu sắc giày được xóa thành công";
            }
            else
            {
                TempData[SD.Error] = "Some shoes is belong to this ShoeColor. Can not delete it!";
            }
            
            return RedirectToAction("Edit", "Shoe", new {id = shoeColor.ShoeId});
        }

        public async Task<IActionResult> EditShoeSize(int id)
        {
            var shoeSize = await _unitOfWork.ShoeSizes.FirstOrDefaultAsync(e => e.Id == id);
            if (shoeSize == null)
            {
                return NotFound();
            }

            ViewData["SizeId"] = new SelectList(await _unitOfWork.Sizes.GetAllAsync(), "Id", "Value", shoeSize.SizeId);
            return View(shoeSize);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> EditShoeSize(int id, [Bind("Id,SizeId,Quantity,ShoeColorId")] ShoeSize shoeSize)
        {
            if (id != shoeSize.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                _unitOfWork.ShoeSizes.Update(shoeSize);
                await _unitOfWork.SaveChangesAsync();
                return RedirectToAction(nameof(Edit), new { id = shoeSize.ShoeColorId });
            }

            ViewData["SizeId"] = new SelectList(await _unitOfWork.Sizes.GetAllAsync(), "Id", "Value", shoeSize.SizeId);
            return View(shoeSize);
        }

        public async Task<IActionResult> AddShoeSize(int shoeColorId)
        {
            ViewData["Sizes"] = new SelectList(await _unitOfWork.Sizes.GetAllAsync(), "Id", "Value");
            var shoeSize = new ShoeSize
            {
                ShoeColorId = shoeColorId
            };
            return View(shoeSize);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> AddShoeSize([Bind("SizeId,Quantity,ShoeColorId")] ShoeSize shoeSize)
        {
            if (ModelState.IsValid)
            {
                await _unitOfWork.ShoeSizes.AddAsync(shoeSize);
                await _unitOfWork.SaveChangesAsync();
                return RedirectToAction("Edit", new { id = shoeSize.ShoeColorId });
            }

            ViewData["Sizes"] = new SelectList(await _unitOfWork.Sizes.GetAllAsync(), "Id", "Value", shoeSize.SizeId);
            return View(shoeSize);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteShoeSize(int shoeSizeId, int shoeColorId)
        {
            var shoeSize = await _unitOfWork.ShoeSizes.FirstOrDefaultAsync(s => s.Id == shoeSizeId);
            if (shoeSize == null)
            {
                return NotFound();
            }

            _unitOfWork.ShoeSizes.Remove(shoeSize);
            await _unitOfWork.SaveChangesAsync();
            return RedirectToAction("Edit", new { id = shoeColorId });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> UploadImage(int shoeColorId, IFormFile imageFile)
        {
            if (imageFile != null && imageFile.Length > 0)
            {
                var shoeColor = await _unitOfWork.ShoeColors.FirstOrDefaultAsync(e => e.Id == shoeColorId);
                if (shoeColor == null)
                {
                    return NotFound();
                }

                string root = _webHostEnvironment.WebRootPath;
                string fileName = Guid.NewGuid().ToString();
                string fileExtension = Path.GetExtension(imageFile.FileName);
                string filePath = Path.Combine(root, @"images\shoes", fileName + fileExtension);
                await using (var fileStream = new FileStream(filePath, FileMode.Create))
                {
                    await imageFile.CopyToAsync(fileStream);
                }

                var image = new Image
                {
                    ShoeColorId = shoeColorId,
                    Path = @"\images\shoes\" + fileName + fileExtension,
                    SortOrder = shoeColor.Images?.Count() + 1 ?? 1
                };
                await _unitOfWork.Images.AddAsync(image);
                await _unitOfWork.SaveChangesAsync();
            }

            return RedirectToAction(nameof(Edit), new { id = shoeColorId });
        }
    }
}
--------------------------------------------------------------------------------
Edit.cshtml
@model ShoeStore.Models.ShoeColor

@{
    ViewData["Title"] = "Shoe Color Edit" + " ";
    Layout = "_AdminLayout";
}

<div class="admin-title mt-4 mb-4">
    <ion-icon name="settings-outline"></ion-icon>
    <div class="admin-title-content">
        <h5>Quản lý thông tin màu sắc giày</h5>
        <span>Liệt kê danh sách thông tin màu sắc giày</span>
    </div>
</div>

<hr />
<div class="container p-0">
    <div class="">
        <h3 class="title-option mb-4">Chỉnh sửa thông tin màu sắc giày</h3>
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="row">
                <div class="col-md-4 mb-3">
                    <label asp-for="FactoryPrice" class="form-label">Giá xuất xưởng</label>
                    <input asp-for="FactoryPrice" class="form-control" />
                    <span asp-validation-for="FactoryPrice" class="text-danger"></span>
                </div>
                <div class="col-md-4 mb-3">
                    <label asp-for="SalePrice" class="form-label">Giá bán</label>
                    <input asp-for="SalePrice" class="form-control" />
                    <span asp-validation-for="SalePrice" class="text-danger"></span>
                </div>
                <div class="col-md-4 mb-3">
                    <label asp-for="SortOrder" class="form-label">Thứ tự sắp xếp</label>
                    <input asp-for="SortOrder" class="form-control" />
                    <span asp-validation-for="SortOrder" class="text-danger"></span>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="ShoeId" class="form-label">Giày</label>
                    <select asp-for="ShoeId" class="form-select" asp-items="ViewBag.ShoeId" readonly></select>
                    <span asp-validation-for="ShoeId" class="text-danger"></span>
                </div>
                <div class="col-md-6 mb-3">
                    <label asp-for="ColorId" class="form-label">Màu sắc</label>
                    <select asp-for="ColorId" class="form-select" asp-items="ViewBag.ColorId"></select>
                    <span asp-validation-for="ColorId" class="text-danger"></span>
                </div>
            </div>
            <div class="col-12 col-md-6 mb-3">
                <div class="form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="Active" /> @Html.DisplayNameFor(model => model.Active)
                    </label>
                </div>
            </div>
            <div class="d-flex justify-content-center align-items-center mb-3">
                <input type="submit" value="Lưu" class="btn-save" />
            </div>
        </form>
    </div>

    <div class="shoeImage mt-5">
        <h3 class="title-option mb-4"><span>Ảnh<sub class="fs-6">(@Model.Images.Count())</sub></span></h3>
        <div class="d-flex flex-column col-md-8 mx-auto position-relative">
            <div class="add-image">
                <button class="btn-save btn-add-img">
                    <i class="fa-regular fa-plus fs-1"></i>
                </button>
            </div>
            <!-- Hidden form for uploading images -->
            <form id="image-upload-form" asp-action="UploadImage" asp-controller="ShoeColors" method="post" enctype="multipart/form-data" style="display:none;">
                <input type="hidden" name="shoeColorId" value="@Model.Id" />
                <input type="file" name="imageFile" accept="image/*" onchange="document.getElementById('image-upload-form').submit();" />
            </form>
            <!-- Existing carousel code... -->
            <div class="carousel carousel-main" data-flickity='{"prevNextButtons": true, "pageDots": false}'>
                @foreach (var image in @Model.Images?.OrderBy(e => e.SortOrder) ?? Enumerable.Empty<Image>())
                {
                    <div class="carousel-cell" data-id="@image.Id">
                        <img src="@image.Path" data-id="@image.Id" alt="thumbnail-small" />
                    </div>
                }
            </div>
            <div class="carousel carousel-nav"
                data-flickity='{ "asNavFor": ".carousel-main", "contain": true, "pageDots": false, "prevNextButtons": false }'>
                @foreach (var image in @Model.Images?.OrderBy(e => e.SortOrder) ?? Enumerable.Empty<Image>())
                {
                    <div class="carousel-cell thumbnail-small " data-id="@image.Id" data-sortOrder="@image.SortOrder">
                        <img src="@image.Path" data-id="@image.Id" class="img-fluid" alt="thumbnail-small" />
                        <div class="screen-blur"></div>
                        <div class="sort-options">
                            <div class="delete">
                                <i class="fa-solid fa-trash delete-image"></i>
                            </div>
                            <div class="sort-order">
                                <select name="SortOrder"></select>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-12 mt-5">
        <h3 class="title-option mb-4">Danh sách kích cỡ</h3>
        @* <select class="form-select" asp-items="ViewBag.SizeId"></select> *@
        <div class="table-responsive size-list text-right">
            <table class="table table-bordered table-striped align-middle">
                <thead class="">
                    <tr>
                        <th>Kích cỡ</th>
                        <th>Số lượng</th>
                        <th>Chức năng</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var shoeSize in Model?.ShoeSizes?.OrderBy(e => e?.Size?.Value).ToList() ??
                    Enumerable.Empty<ShoeSize>())
                    {
                        <tr data-id="@shoeSize.Id">
                            <td class="col-auto">@shoeSize?.Size?.Value</td>
                            <td class="col-auto">@shoeSize?.Quantity</td>
                            <td>
                                <a asp-action="EditShoeSize" asp-route-id="@shoeSize.Id" class="btn-option edit-size">
                                    <i class="fa-regular fa-pen-to-square"></i>
                                </a>
                                <form asp-action="DeleteShoeSize" method="post" style="display:inline;">
                                    <input type="hidden" name="shoeSizeId" value="@shoeSize.Id" />
                                    <input type="hidden" name="shoeColorId" value="@Model.Id" />
                                    <button type="submit" class="btn-option delete-size">
                                        <i class="fa-solid fa-trash"></i>
                                    </button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
    </div>
</div>


<div class="d-flex justify-content-center align-items-center gap-4">
    <a asp-action="AddShoeSize" asp-controller="ShoeColors" asp-route-shoeColorId="@Model.Id" class="btn-save">
        Thêm kích cỡ
    </a>
    <a asp-controller="Shoe" asp-action="Edit" asp-route-id="@Model?.ShoeId" class="btn-back">
        Quay lại
    </a>
</div>

@section Scripts
{
    
    <script>
        document.querySelector('.btn-add-img').addEventListener('click', function () {
            document.querySelector('input[name="imageFile"]').click();
        });
    </script>
}
----------------------------------------------------------
Image.cs
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;

namespace ShoeStore.Models;

public class Image
{
    public int Id { get; set; }
    [Required] public string? Path { get; set; }
    [Required]
    public int SortOrder { get; set; }

    public int ShoeColorId { get; set; }
    [ValidateNever] public ShoeColor? ShoeColor { get; set; }
}
--------------------------------------------------------
ShoeColor.cs
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;

namespace ShoeStore.Models;

public class ShoeColor
{
    public int Id { get; set; }
    public string? ProductCode { get; set; }

    [Column(TypeName = "decimal(10, 2)")] public decimal FactoryPrice { get; set; }

    [Column(TypeName = "decimal(10, 2)")] public decimal SalePrice { get; set; }

    public int SortOrder { get; set; }
    public int Priority { get; set; } = 1;
    public bool Active { get; set; }
    public string? Url { get; set; }
    public DateTime Created { get; set; }
    public DateTime Edited { get; set; }

    public int ShoeId { get; set; }
    [ValidateNever] public Shoe? Shoe { get; set; }
    public int ColorId { get; set; }
    [ValidateNever] public Color? Color { get; set; }

    [ValidateNever] public IEnumerable<ShoeSize>? ShoeSizes { get; set; }
    [ValidateNever] public IEnumerable<Image>? Images { get; set; }
}